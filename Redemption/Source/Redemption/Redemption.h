// Copyright 2022 wevet works All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "NativeGameplayTags.h"

// using
// *GETENUMSTRING("/Script/ProjectName.EnumName")
#define GETENUMSTRING(etype, evalue)\
	 ((FindObject<UEnum>(nullptr, TEXT(etype), true) != nullptr) ? FindObject<UEnum>(nullptr, TEXT(etype), true)->GetNameStringByIndex((int32)evalue) : FString("Invalid - UENUM() macro?"))

// Input
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Game_Input_Disable);

// PlayerAction
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_Player_Melee);

// Combo frag tag
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionMelee_ComboRequire);

// Attack frag tag
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionMelee_Forbid);

// Melee Action 
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionMelee);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionMelee_Hold);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionMelee_Combo1);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionMelee_Combo2);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionMelee_Combo3);

// Knife Action
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionKnife);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionKnife_Hold);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionKnife_Combo1);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionKnife_Combo2);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionKnife_Combo3);


REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionStrafeChange);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionAimChange);

// JumpAction
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionJump);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionJump_Forbid);

// Dash
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionDash);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionDash_Forbid);

// Crouch
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionCrouch);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionCrouch_Forbid);

// Drive
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionDrive);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_ActionDrive_Forbid);

// if reload active tag added character state tag
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_Action_GunReload);

// TargetLockOn
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_TargetLock);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_TargetLocking);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Character_TargetLock_Forbid);

// Climbing
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Locomotion_ClimbingJump);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Locomotion_ClimbingLedgeEnd);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Locomotion_ClimbingAbort);

// Mantling
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Locomotion_Mantling);

// Forbid
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Locomotion_ForbidClimbing);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Locomotion_ForbidMantling);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Locomotion_ForbidMovement);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Locomotion_ForbidJump);

// weapon type
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Weapon_Melee_Default);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Weapon_Melee_Knife);

REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Weapon_Melee_Pistol);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Weapon_Melee_Pistol_AmmoEmpty);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Weapon_Melee_Rifle);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Weapon_Melee_Rifle_AmmoEmpty);

// bullet weapon state
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Weapon_Gun_Reload);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Weapon_Gun_Fire);

// AI 
// waypoint visited
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_Waypoint_Visited);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_Waypoint_UnVisited);

// AI ActionState
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_State_Search);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_State_Combat);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_State_Patrol);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_State_Follow);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_State_Friend);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_Character_Leader);
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_AI_Character_Ignore);

// vehicle
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Vehicle_Drive); // drive action start
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Vehicle_UnDrive); // drive actoin end
REDEMPTION_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(TAG_Vehicle_State_Drive); // current is driving

/*
* ABaseCharacter Destroy Interval
*/
#define DEFAULT_LIFESPAN 30.0f

/*
* AIPerception Sight CancelEvent Interval
*/
#define SIGHT_AGE 20.0f

/*
* AIPerception Hear CancelEvent Interval
*/
#define HEAR_AGE 30.0f

/*
* AIPerception Follow CancelEvent Interval
*/
#define FOLLOW_AGE -1.0

/*
* AIPerception Friend CancelEvent Interval
*/
#define FRIEND_AGE 120.0


#define NEARLEST_TARGET_SYNC_POINT FName(TEXT("NearlestTarget"))
#define FINISHER_TARGET_SYNC_POINT FName(TEXT("FinisherTarget"))

/*
* project custom collision preset
*/
#define K_CHARACTER_COLLISION_PRESET FName(TEXT("BaseCharacter"))


